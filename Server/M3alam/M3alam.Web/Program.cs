using M3alam.Application;
using M3alam.Infrastructure;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);

// ??????????????????????????????????????????????????????????????????????????????
// 1) Swagger (Development only)
// ??????????????????????????????????????????????????????????????????????????????
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "M3alam API", Version = "v1" });
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.ApiKey,
        Scheme = JwtBearerDefaults.AuthenticationScheme,
        Description = "Enter: Bearer {your JWT token}"
    });
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme {
                Reference = new OpenApiReference {
                    Type = ReferenceType.SecurityScheme,
                    Id   = JwtBearerDefaults.AuthenticationScheme
                }
            },
            Array.Empty<string>()
        }
    });
});

// ??????????????????????????????????????????????????????????????????????????????
// 2) CORS (if needed)
// ??????????????????????????????????????????????????????????????????????????????
builder.Services.AddCors(o =>
{
    o.AddDefaultPolicy(p =>
        p.AllowAnyOrigin()
         .AllowAnyHeader()
         .AllowAnyMethod()
    );
});

// ??????????????????????????????????????????????????????????????????????????????
// 3) JWT Bearer Authentication
// ??????????????????????????????????????????????????????????????????????????????
builder.Services
    .AddAuthentication(options =>
    {
        // Makes [Authorize] use JWT Bearer by default
        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    })
    .AddJwtBearer(options =>
    {
        // URL of your deployed Identity server
        options.Authority = builder.Configuration["OpenId:Authority"];
        // The API “scope” or audience your tokens are minted for
        options.Audience = "M3alam API";
        // Require HTTPS in production
        options.RequireHttpsMetadata = true;

        // Optional: tighten clock skew
        options.TokenValidationParameters.ClockSkew = TimeSpan.FromSeconds(30);
    });

// ??????????????????????????????????????????????????????????????????????????????
// 4) Your layers & controllers
// ??????????????????????????????????????????????????????????????????????????????
builder.Services.AddControllers();
builder.Services.AddM3alamInfrastructure(builder.Configuration);
builder.Services.AddApplication();
builder.Services.AddAuthorization();

var app = builder.Build();

// ??????????????????????????????????????????????????????????????????????????????
// 5) Pipeline
// ??????????????????????????????????????????????????????????????????????????????
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "M3alam API v1"));
}

app.UseHttpsRedirection();
app.UseRouting();
app.UseCors();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();
